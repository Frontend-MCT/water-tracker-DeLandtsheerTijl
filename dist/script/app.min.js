
class ProgressTracker{
    constructor(options){
        console.log(options);
        this.options = options;

        this.currentProgress = []//dataAccess[this.options.mode].getProgressOfToday() || [];
        this.timerId = null;

        this.percentageRatio = 100 / this.options.dailyGoal;

        this.percentage = document.querySelector(`.${this.options.domRefs.percentage}`);
        this.timeStampHolder= document.querySelector(`.${this.options.domRefs.timeStampHolder}`);
        this.addButton= document.querySelector(`.${this.options.domRefs.addButton}`);

        this.currentGoalHolders= document.querySelectorAll(`.${this.options.domRefs.currentGoal}`);
        this.currentUnitsHolders= document.querySelectorAll(`.${this.options.domRefs.currentUnits}`);

        this.showUserOptions();
        this.updateProgress();
        // afterUpdate: Æ’ (newPercentage)
        // dailyGoal: 2000
        // domRefs: {percentage: "js-amount", timeStampHolder: "js-time-stamps", addButton: "js-log", currentGoal: "js-goal", currentUnits: "js-units"}
        // mode: "local"
        // units: "ml"
    }

    updateProgress(newLogging = [null, 200]){ //newlogging is een array of obj met een timestamp en andere values
        this.currentProgress.push(newLogging);
        this.showTimeStamp(newLogging[0]);

        const oldProgress = this.percentage.innerText,
            newProgress = Number(oldProgress) + newLogging[1] * this.percentageRatio;

        let v = oldProgress;

        this.timerId = setInterval(() => {
            this.percentage.innerText = v;
            if(v >= newProgress){
                clearInterval(this.timerId);
            }
            v++;
        }, 16);
    }

    showUserOptions(){
        for(const g of this.currentGoalHolders){
            g.innerHTML = this.options.dailyGoal;
        }

        for(const u of this.currentUnitsHolders){
            u.innerHTML = this.options.units;
        }
    }
}
//hoofdmodule
const uiBinding = (function () {

    //submodule
    const wave = (function () {
        const setup = function () {
            console.log("setup");
        };
        const updateWaveHeight = function () {
            console.log('updateWaveHeight');
        };

        return {
            setup: setup,
            updateWaveHeight: updateWaveHeight
        }
    })();

    //submodule
    const logging = (function () {
        const setup = function () {
            console.log('setup');
        }

        const enableAmountOptions = function () {
            console.log("enable Amount options");
        }

        return {
            setup: setup,
            enableAmountOptions: enableAmountOptions
        }
    })();

    return {
        wave: wave,
        logging: logging
    };
})();
(function() {
    console.log('ðŸ’§', 'https://www.youtube.com/watch?v=ARC1w1WWxGY');
    
    const options = {
        units: 'ml', 
        dailyGoal: 3000,
        mode: 'local',
        domRefs: {
            //Het huidige percentage
            percentage: 'js-amount',
            //De tijdstippen
            timeStampHolder: 'js-time-stamps',
            //De ('voeg toe') - knop
            addButton: 'js-log',
            //Een klasse voor elk element waarin de goal moet komen
            currentGoal: 'js-goal',
            //Een klasse voor elk element waarin de eengeden mogen komen
            currentUnits: 'js-units'
        },
        afterUpdate: function(newPercentage){
            console.log('It has been updated!');
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        new ProgressTracker(options);
    });
    
})(); 
